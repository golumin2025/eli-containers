---
import Button from "@components/ui/Button.astro";
import ImageMod from "@components/ui/ImageMod.astro";
import { getEntry } from "astro:content";

const nav = await getEntry("singletons", "header");
const general = await getEntry("singletons", "general");
---

<header
  class="relative z-[990000] shadow-md transition-all duration-300"
  id="navbar"
>
  <div class="">
    <div class="flex custom-container justify-between items-center py-4">
      <!-- Logo -->
      <a href="/" class="text-xl font-bold text-gray-800 max-w-36">
        <ImageMod src={general.data.logo.logo} alt="Logo" />
      </a>

      <!-- Desktop Navigation -->
      <nav class="hidden lg:flex space-x-8" id="navItems">
        {
          nav?.data.menuItems.map((item) =>
            !item.subMenu?.length ? (
              <a
                href={item.link}
                class="text-black underline-text font-medium hover:text-primary"
              >
                {item.name}
              </a>
            ) : (
              <div class="relative group">
                <button class="text-black flex cursor-pointer font-medium items-center gap-1 hover:text-primary">
                  <span class="underline-text">{item.name}</span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    fill="none"
                    class="w-5"
                  >
                    <path
                      d="M6 9l6 6 6-6"
                      stroke="currentColor"
                      stroke-width="1.5"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                </button>
                <div class="absolute left-0 mt-2 w-56 bg-white shadow-lg rounded-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300">
                  {item.subMenu.map((sub) => (
                    <a
                      href={sub.link}
                      class="block px-4 py-2 text-black hover:text-primary"
                    >
                      {sub.name}
                    </a>
                  ))}
                </div>
              </div>
            ),
          )
        }
      </nav>
      <div class="flex items-center space-x-4">
        <!-- CTA Button -->
        {
          nav?.data.button.enable && (
            <div class="hidden sm:flex">
              <Button link={nav.data.button.link}>
                {nav.data.button.label}
              </Button>
            </div>
          )
        }

        <!-- Mobile menu button -->
        <button class="lg:hidden text-black text-3xl" id="menuBtn">☰</button>
      </div>
    </div>
  </div>
</header>

<!-- Mobile Menu -->
<div
  class="lg:hidden fixed top-0 right-0 w-full h-full bg-gray-900/70 z-[990000] hidden transition-all duration-300"
  id="mobileMenu"
>
  <div
    class="bg-white ml-auto w-72 h-full p-4 shadow-lg transition-transform overflow-y-auto duration-300"
  >
    <button class="absolute top-4 right-4 text-black text-2xl" id="closeMenu"
      >✕</button
    >

    <nav class="mt-12 border-b border-black/20 divide-y divide-black/20">
      {
        nav?.data.menuItems.map((item, index) =>
          !item.subMenu?.length ? (
            <a href={item.link} class="block py-2 text-black hover:bg-gray-100">
              {item.name}
            </a>
          ) : (
            <div class="relative">
              <button
                class="text-black py-2 w-full flex justify-between items-center"
                data-dropdown={index}
              >
                {item.name}
                <svg width="24" height="24" fill="none" class="w-5">
                  <path
                    d="M6 9l6 6 6-6"
                    stroke="currentColor"
                    stroke-width="1.5"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              </button>
              <div
                class="hidden bg-white divide-y divide-black/20"
                data-dropdown-menu={index}
              >
                {item.subMenu.map((sub) => (
                  <a
                    href={sub.link}
                    class="block px-6 py-2 text-black hover:bg-gray-100"
                  >
                    {sub.name}
                  </a>
                ))}
              </div>
            </div>
          ),
        )
      }
    </nav>
  </div>
</div>

<!-- Styles -->
<style>
  .underline-text {
    display: inline-block;
    padding-bottom: 2px;
    background-image: linear-gradient(#ce202f, #ce202f);
    background-position: 0 100%; /*OR bottom left*/
    background-size: 0% 2px;
    background-repeat: no-repeat;
    transition:
      background-size 0.3s,
      background-position 0s 0.3s; /*change after the size immediately*/
  }

  .underline-text:hover {
    background-position: 100% 100%; /*OR bottom right*/
    background-size: 100% 2px;
  }

  /* Mobile menu animation */
  #mobileMenu:not(.hidden) .bg-white {
    animation: slideIn 0.3s ease-out forwards;
  }
  @keyframes slideIn {
    from {
      transform: translateX(100%);
    }
    to {
      transform: translateX(0);
    }
  }
</style>

<!-- Scripts -->
<script>
  function init() {
    const menuBtn = document.getElementById("menuBtn");
    const closeMenu = document.getElementById("closeMenu");
    const mobileMenu = document.getElementById("mobileMenu");
    const dropdownBtns = document.querySelectorAll("[data-dropdown]");

    // Mobile menu toggle
    menuBtn?.addEventListener("click", () => {
      mobileMenu?.classList.remove("hidden");
      document.body.style.overflow = "hidden";
    });

    closeMenu?.addEventListener("click", () => {
      mobileMenu?.classList.add("hidden");
      document.body.style.overflow = "";
    });

    // Mobile dropdown toggle
    dropdownBtns.forEach((btn) => {
      btn.addEventListener("click", () => {
        const index = btn.getAttribute("data-dropdown");
        const menu = document.querySelector(`[data-dropdown-menu="${index}"]`);
        menu?.classList.toggle("hidden");
      });
    });
  }

  // Initialize on page load
  init();

  // Re-initialize after Astro view transitions
  document.addEventListener("astro:after-swap", init);
</script>
