---
import Button from "@components/ui/Button.astro";
import ImageMod from "@components/ui/ImageMod.astro";
import { getEntry } from "astro:content";

const nav = await getEntry("singletons", "header");
const general = await getEntry("singletons", "general");
---

<header
  class="relative z-[990000] shadow-md transition-all duration-300"
  id="navbar"
>
  <div class="">
    <div class="flex custom-container justify-between items-center py-4">
      <div class="flex items-center space-x-4">
        <!-- Mobile menu button -->
        <button class="lg:hidden text-black text-3xl" id="menuBtn">☰</button>
        <!-- Logo -->
        <a href="/" class="text-xl font-bold text-gray-800">
          <ImageMod
            src={general.data.logo.logo}
            alt="Logo"
            className="max-w-32"
          />
        </a>
      </div>
      <!-- Desktop Navigation -->
      <nav class="hidden lg:flex space-x-8" id="navItems">
        {
          nav?.data.menuItems.map((item) =>
            !item.subMenu?.length ? (
              <a
                href={item.link}
                class="text-black underline-text font-medium hover:text-primary"
              >
                {item.name}
              </a>
            ) : (
              <div class="relative group">
                <button class="text-black flex cursor-pointer font-medium items-center gap-1 hover:text-primary">
                  <span class="underline-text">{item.name}</span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    fill="none"
                    class="w-5"
                  >
                    <path
                      d="M6 9l6 6 6-6"
                      stroke="currentColor"
                      stroke-width="1.5"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                </button>
                <div class="absolute left-0 mt-2 w-56 bg-white shadow-lg rounded-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300">
                  {item.subMenu.map((sub) => (
                    <a
                      href={sub.link}
                      class="block px-4 py-2 text-black hover:text-primary"
                    >
                      {sub.name}
                    </a>
                  ))}
                </div>
              </div>
            )
          )
        }
      </nav>
      <div class="flex items-center space-x-4">
        <!-- CTA Button -->
        <!-- {
          nav?.data.button.enable && (
            <div class="flex">
              <Button link={nav.data.button.link}>
                {nav.data.button.label}
              </Button>
            </div>
          )
        } -->
        {
          general.data.contactInformation.phone && (
            <div class="flex">
              <a
                href={`tel:${general.data.contactInformation.phone}`}
                class="text-black font-medium hover:text-primary flex items-center gap-2 duration-150"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  class=" flex "
                  data-src="https://cdn.hugeicons.com/icons/call-solid-rounded.svg"
                  xmlns:xlink="http://www.w3.org/1999/xlink"
                  role="img"
                  color="#000000"
                >
                  <path
                    d="M5.31726 1.28657C5.88395 1.40369 6.33524 1.78443 6.61564 2.28746L7.50885 3.88991C7.83786 4.48011 8.11473 4.9768 8.29554 5.40857C8.48735 5.86658 8.60126 6.31824 8.54919 6.8176C8.49711 7.31696 8.29246 7.7354 8.01029 8.14399C7.74428 8.52917 7.37088 8.95804 6.92718 9.46767L5.61417 10.9759C5.37889 11.2461 5.26124 11.3812 5.25049 11.5501C5.23974 11.719 5.33616 11.8633 5.529 12.1518C7.17259 14.6109 9.38773 16.8268 11.8488 18.4718C12.1374 18.6647 12.2816 18.7611 12.4505 18.7503C12.6194 18.7396 12.7546 18.6219 13.0248 18.3866L14.5331 17.0736C15.0427 16.6299 15.4716 16.2565 15.8568 15.9905C16.2653 15.7083 16.6838 15.5036 17.1831 15.4516C17.6825 15.3995 18.1342 15.5134 18.5922 15.7052C19.0239 15.886 19.5206 16.1629 20.1107 16.4918L21.7133 17.3851C22.2163 17.6655 22.5971 18.1168 22.7142 18.6835C22.8325 19.2561 22.658 19.8316 22.2724 20.3047C20.8735 22.021 18.6322 23.1139 16.281 22.6396C14.8358 22.348 13.4098 21.8623 11.6851 20.8732C8.2197 18.8858 5.11263 15.777 3.12755 12.3157C2.13843 10.591 1.65272 9.165 1.36118 7.71974C0.88688 5.36852 1.97971 3.12724 3.69608 1.72833C4.16911 1.34279 4.74466 1.16822 5.31726 1.28657Z"
                    fill="#000000"
                  />
                </svg>
                <span class="md:block hidden">
                  {general.data.contactInformation.phoneDisplay}
                </span>
              </a>
            </div>
          )
        }
      </div>
    </div>
  </div>
</header>

<!-- Mobile Menu -->
<div
  class="lg:hidden fixed top-0 right-0 w-full h-full bg-gray-900/70 z-[990000] hidden transition-all duration-300"
  id="mobileMenu"
>
  <div
    class="bg-white ml-auto w-72 h-full p-4 shadow-lg transition-transform overflow-y-auto duration-300"
  >
    <button class="absolute top-4 right-4 text-black text-2xl" id="closeMenu"
      >✕</button
    >

    <nav class="mt-12 border-b border-black/20 divide-y divide-black/20">
      {
        nav?.data.menuItems.map((item, index) =>
          !item.subMenu?.length ? (
            <a href={item.link} class="block py-2 text-black hover:bg-gray-100">
              {item.name}
            </a>
          ) : (
            <div class="relative">
              <button
                class="text-black py-2 w-full flex justify-between items-center"
                data-dropdown={index}
              >
                {item.name}
                <svg width="24" height="24" fill="none" class="w-5">
                  <path
                    d="M6 9l6 6 6-6"
                    stroke="currentColor"
                    stroke-width="1.5"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              </button>
              <div
                class="hidden bg-white divide-y divide-black/20"
                data-dropdown-menu={index}
              >
                {item.subMenu.map((sub) => (
                  <a
                    href={sub.link}
                    class="block px-6 py-2 text-black hover:bg-gray-100"
                  >
                    {sub.name}
                  </a>
                ))}
              </div>
            </div>
          )
        )
      }
    </nav>
  </div>
</div>

<!-- Styles -->
<style>
  .underline-text {
    display: inline-block;
    padding-bottom: 2px;
    background-image: linear-gradient(#ce202f, #ce202f);
    background-position: 0 100%; /*OR bottom left*/
    background-size: 0% 2px;
    background-repeat: no-repeat;
    transition:
      background-size 0.3s,
      background-position 0s 0.3s; /*change after the size immediately*/
  }

  .underline-text:hover {
    background-position: 100% 100%; /*OR bottom right*/
    background-size: 100% 2px;
  }

  /* Mobile menu animation */
  #mobileMenu:not(.hidden) .bg-white {
    animation: slideIn 0.3s ease-out forwards;
  }
  @keyframes slideIn {
    from {
      transform: translateX(100%);
    }
    to {
      transform: translateX(0);
    }
  }
</style>

<!-- Scripts -->
<script>
  function init() {
    const menuBtn = document.getElementById("menuBtn");
    const closeMenu = document.getElementById("closeMenu");
    const mobileMenu = document.getElementById("mobileMenu");
    const dropdownBtns = document.querySelectorAll("[data-dropdown]");

    // Mobile menu toggle
    menuBtn?.addEventListener("click", () => {
      mobileMenu?.classList.remove("hidden");
      document.body.style.overflow = "hidden";
    });

    closeMenu?.addEventListener("click", () => {
      mobileMenu?.classList.add("hidden");
      document.body.style.overflow = "";
    });

    // Mobile dropdown toggle
    dropdownBtns.forEach((btn) => {
      btn.addEventListener("click", () => {
        const index = btn.getAttribute("data-dropdown");
        const menu = document.querySelector(`[data-dropdown-menu="${index}"]`);
        menu?.classList.toggle("hidden");
      });
    });
  }

  // Initialize on page load
  init();

  // Re-initialize after Astro view transitions
  document.addEventListener("astro:after-swap", init);
</script>
